// Copyright 2021 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import "github.com/nats-io/nats.go"
import context "context"
import mock "github.com/stretchr/testify/mock"
import rnats "github.com/mendersoftware/reporting/client/nats"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// IsConnected provides a mock function with given fields:
func (_m *Client) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// JetStreamCreateStream provides a mock function with given fields: streamName
func (_m *Client) JetStreamCreateStream(streamName string) error {
	ret := _m.Called(streamName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(streamName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JetStreamPublish provides a mock function with given fields: _a0, _a1
func (_m *Client) JetStreamPublish(_a0 string, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JetStreamSubscribe provides a mock function with given fields: ctx, subj, durable, q
func (_m *Client) JetStreamSubscribe(ctx context.Context, subj string, durable string, q chan *nats.Msg) (rnats.UnsubscribeFunc, error) {
	ret := _m.Called(ctx, subj, durable, q)

	var r0 rnats.UnsubscribeFunc
	if rf, ok := ret.Get(0).(func(context.Context, string, string, chan *nats.Msg) rnats.UnsubscribeFunc); ok {
		r0 = rf(ctx, subj, durable, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rnats.UnsubscribeFunc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, chan *nats.Msg) error); ok {
		r1 = rf(ctx, subj, durable, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamName provides a mock function with given fields:
func (_m *Client) StreamName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WithStreamName provides a mock function with given fields: streamName
func (_m *Client) WithStreamName(streamName string) rnats.Client {
	ret := _m.Called(streamName)

	var r0 rnats.Client
	if rf, ok := ret.Get(0).(func(string) rnats.Client); ok {
		r0 = rf(streamName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rnats.Client)
		}
	}

	return r0
}
