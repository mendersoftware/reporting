// Copyright 2023 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mendersoftware/reporting/model"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// IsConnected provides a mock function with given fields:
func (_m *Client) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// JetStreamPublish provides a mock function with given fields: _a0, _a1
func (_m *Client) JetStreamPublish(_a0 string, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JetStreamSubscribe provides a mock function with given fields: ctx, sub, dur, q
func (_m *Client) JetStreamSubscribe(ctx context.Context, sub string, dur string, q chan model.Job) error {
	ret := _m.Called(ctx, sub, dur, q)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, chan model.Job) error); ok {
		r0 = rf(ctx, sub, dur, q)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields: ctx, sub, dur, recreate
func (_m *Client) Migrate(ctx context.Context, sub string, dur string, recreate bool) error {
	ret := _m.Called(ctx, sub, dur, recreate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, sub, dur, recreate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
