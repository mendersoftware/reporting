// Copyright 2023 Northern.tech AS
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	    http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	deployments "github.com/mendersoftware/reporting/client/deployments"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetDeployments provides a mock function with given fields: ctx, tenantID, IDs
func (_m *Client) GetDeployments(ctx context.Context, tenantID string, IDs []string) ([]*deployments.DeviceDeployment, error) {
	ret := _m.Called(ctx, tenantID, IDs)

	var r0 []*deployments.DeviceDeployment
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*deployments.DeviceDeployment); ok {
		r0 = rf(ctx, tenantID, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*deployments.DeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, tenantID, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestFinishedDeployment provides a mock function with given fields: ctx, tenantID, deviceIDs
func (_m *Client) GetLatestFinishedDeployment(ctx context.Context, tenantID string, deviceIDs []string) ([]deployments.LastDeviceDeployment, error) {
	ret := _m.Called(ctx, tenantID, deviceIDs)

	var r0 []deployments.LastDeviceDeployment
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []deployments.LastDeviceDeployment); ok {
		r0 = rf(ctx, tenantID, deviceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployments.LastDeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, tenantID, deviceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
