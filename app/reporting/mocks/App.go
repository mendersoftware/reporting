// Copyright 2022 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	inventory "github.com/mendersoftware/reporting/client/inventory"
	mock "github.com/stretchr/testify/mock"

	model "github.com/mendersoftware/reporting/model"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// GetMapping provides a mock function with given fields: ctx, tid
func (_m *App) GetMapping(ctx context.Context, tid string) (*model.Mapping, error) {
	ret := _m.Called(ctx, tid)

	var r0 *model.Mapping
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Mapping); ok {
		r0 = rf(ctx, tid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Mapping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSearchableInvAttrs provides a mock function with given fields: ctx, tid
func (_m *App) GetSearchableInvAttrs(ctx context.Context, tid string) ([]model.FilterAttribute, error) {
	ret := _m.Called(ctx, tid)

	var r0 []model.FilterAttribute
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.FilterAttribute); ok {
		r0 = rf(ctx, tid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilterAttribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *App) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InventoryAggregateDevices provides a mock function with given fields: ctx, aggregateParams
func (_m *App) InventoryAggregateDevices(ctx context.Context, aggregateParams *model.AggregateParams) ([]model.DeviceAggregation, error) {
	ret := _m.Called(ctx, aggregateParams)

	var r0 []model.DeviceAggregation
	if rf, ok := ret.Get(0).(func(context.Context, *model.AggregateParams) []model.DeviceAggregation); ok {
		r0 = rf(ctx, aggregateParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DeviceAggregation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.AggregateParams) error); ok {
		r1 = rf(ctx, aggregateParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InventorySearchDevices provides a mock function with given fields: ctx, searchParams
func (_m *App) InventorySearchDevices(ctx context.Context, searchParams *model.SearchParams) ([]inventory.Device, int, error) {
	ret := _m.Called(ctx, searchParams)

	var r0 []inventory.Device
	if rf, ok := ret.Get(0).(func(context.Context, *model.SearchParams) []inventory.Device); ok {
		r0 = rf(ctx, searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.Device)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, *model.SearchParams) int); ok {
		r1 = rf(ctx, searchParams)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *model.SearchParams) error); ok {
		r2 = rf(ctx, searchParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
